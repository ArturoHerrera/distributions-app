export declare const uniform: {
    pdf: (x: any, lowerSupportBound: any, upperSupportBound: any) => Promise<number>;
    cdf: (x: any, lowerSupportBound: any, upperSupportBound: any, lowerTail?: boolean) => Promise<number>;
    quantile: (x: any, lowerSupportBound: any, upperSupportBound: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, lowerSupportBound: any, upperSupportBound: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, lowerSupportBound: any, upperSupportBound: any) => number;
    cdfSync: (x: any, lowerSupportBound: any, upperSupportBound: any, lowerTail?: boolean) => number;
    quantileSync: (x: any, lowerSupportBound: any, upperSupportBound: any, lowerTail?: boolean) => number;
    randomSync: (n: any, lowerSupportBound: any, upperSupportBound: any, seed?: number | string | undefined) => number[];
};
export declare const normal: {
    pdf: (x: any, mu?: any, sigma?: any) => Promise<number>;
    cdf: (x: any, mu?: any, sigma?: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, mu?: any, sigma?: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, mu?: any, sigma?: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, mu?: any, sigma?: any) => number;
    cdfSync: (x: any, mu?: any, sigma?: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, mu?: any, sigma?: any, lowerTail?: boolean) => number;
    randomSync: (n: any, mu?: any, sigma?: any, seed?: number | string | undefined) => number[];
};
export declare const t: {
    pdf: (x: any, degreesOfFreedom: any) => Promise<number>;
    cdf: (x: any, degreesOfFreedom: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, degreesOfFreedom: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, degreesOfFreedom: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, degreesOfFreedom: any) => number;
    cdfSync: (x: any, degreesOfFreedom: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, degreesOfFreedom: any, lowerTail?: boolean) => number;
    randomSync: (n: any, degreesOfFreedom: any, seed?: number | string | undefined) => number[];
};
export declare const chi2: {
    pdf: (x: any, degreesOfFreedom: any) => Promise<number>;
    cdf: (x: any, degreesOfFreedom: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, degreesOfFreedom: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, degreesOfFreedom: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, degreesOfFreedom: any) => number;
    cdfSync: (x: any, degreesOfFreedom: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, degreesOfFreedom: any, lowerTail?: boolean) => number;
    randomSync: (n: any, degreesOfFreedom: any, seed?: number | string | undefined) => number[];
};
export declare const F: {
    pdf: (x: any, dof1: any, dof2: any) => Promise<number>;
    cdf: (x: any, dof1: any, dof2: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, dof1: any, dof2: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, dof1: any, dof2: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, dof1: any, dof2: any) => number;
    cdfSync: (x: any, dof1: any, dof2: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, dof1: any, dof2: any, lowerTail?: boolean) => number;
    randomSync: (n: any, dof1: any, dof2: any, seed?: number | string | undefined) => number[];
};
export declare const exponential: {
    pdf: (x: any, lambda: any) => Promise<number>;
    cdf: (x: any, lambda: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, lambda: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, lambda: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, lambda: any) => number;
    cdfSync: (x: any, lambda: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, lambda: any, lowerTail?: boolean) => number;
    randomSync: (n: any, lambda: any, seed?: number | string | undefined) => number[];
};
export declare const gamma: {
    pdf: (x: any, shape: any, scale: any) => Promise<number>;
    cdf: (x: any, shape: any, scale: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, shape: any, scale: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, shape: any, scale: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, shape: any, scale: any) => number;
    cdfSync: (x: any, shape: any, scale: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, shape: any, scale: any, lowerTail?: boolean) => number;
    randomSync: (n: any, shape: any, scale: any, seed?: number | string | undefined) => number[];
};
export declare const beta: {
    pdf: (x: any, alpha: any, beta: any) => Promise<number>;
    cdf: (x: any, alpha: any, beta: any, lowerTail?: boolean) => Promise<number>;
    quantile: (x: any, alpha: any, beta: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, alpha: any, beta: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (x: any, alpha: any, beta: any) => number;
    cdfSync: (x: any, alpha: any, beta: any, lowerTail?: boolean) => number;
    quantileSync: (x: any, alpha: any, beta: any, lowerTail?: boolean) => number;
    randomSync: (n: any, alpha: any, beta: any, seed?: number | string | undefined) => number[];
};
export declare const binomial: {
    pdf: (k: any, trials: any, probSuccess: any) => Promise<number>;
    cdf: (k: any, trials: any, probSuccess: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, trials: any, probSuccess: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, trials: any, probSuccess: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (k: any, trials: any, probSuccess: any) => number;
    cdfSync: (k: any, trials: any, probSuccess: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, trials: any, probSuccess: any, lowerTail?: boolean) => number;
    randomSync: (n: any, trials: any, probSuccess: any, seed?: number | string | undefined) => number[];
};
export declare const poisson: {
    pdf: (k: any, lambda: any) => Promise<number>;
    cdf: (k: any, lambda: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, lambda: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, lambda: any, seed?: number | string | undefined) => Promise<number[]>;
    pdfSync: (k: any, lambda: any) => number;
    cdfSync: (k: any, lambda: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, lambda: any, lowerTail?: boolean) => number;
    randomSync: (n: any, lambda: any, seed?: number | string | undefined) => number[];
};
export declare const hypergeometric: {
    pdf: (sampleSuccesses: any, draws: any, successPop: any, totalPop: any) => Promise<number>;
    cdf: (sampleSuccesses: any, draws: any, successPop: any, totalPop: any, lowerTail?: boolean) => Promise<number>;
    quantile: (p: any, draws: any, successPop: any, totalPop: any, lowerTail?: boolean) => Promise<number>;
    random: (n: any, draws: any, successPop: any, totalPop: any, seed?: string | number | undefined) => Promise<number[]>;
    pdfSync: (sampleSuccesses: any, draws: any, successPop: any, totalPop: any) => number;
    cdfSync: (sampleSuccesses: any, draws: any, successPop: any, totalPop: any, lowerTail?: boolean) => number;
    quantileSync: (p: any, draws: any, successPop: any, totalPop: any, lowerTail?: boolean) => number;
    randomSync: (n: any, draws: any, successPop: any, totalPop: any, seed?: string | number | undefined) => number[];
};
