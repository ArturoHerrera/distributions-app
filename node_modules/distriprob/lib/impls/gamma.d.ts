export declare function lnGamma(val: any): number;
/**
 * This function gives the log of the extended(on all non-negative n, possibly
 * non-integer n) factorial function.
 * @param n
 */
export declare function lnFactorial(n: any): number;
export declare function gammaContinuedFraction(x: any, a: any): number;
export declare function lnLowerIncompleteGammaA(x: any, a: any): number;
export declare function lnUpperIncompleteGammaB(x: any, a: any): number;
export declare function lnLowerIncompleteGamma(x: any, a: any): number;
export declare function lnUpperIncompleteGamma(x: any, a: any): number;
export declare function lowerIncompleteGamma(x: any, a: any): number;
export declare function upperIncompleteGamma(x: any, a: any): number;
export declare function inverseLowerIncompleteGamma(p: any, a: any, initialEstimate?: any): any;
export declare function pdfSync(x: any, shape: any, scale: any): number;
export declare function pdf(x: any, shape: any, scale: any): Promise<{}>;
export declare function cdfSync(x: any, shape: any, scale: any, lowerTail?: boolean): number;
export declare function gammaCDF(x: any, shape: any, scale: any, lowerTail?: boolean): number;
export declare function cdf(x: any, shape: any, scale: any, lowerTail?: boolean): Promise<{}>;
export declare function quantileSync(p: any, shape: any, scale: any, lowerTail?: boolean): any;
export declare function quantile(p: any, shape: any, scale: any, lowerTail?: boolean): Promise<{}>;
export declare function randomSync(n: any, shape: any, scale: any, seed?: number | string, randoms?: any): any[];
export declare function random(n: any, shape: any, scale: any, seed?: number | string): Promise<{}>;
